// module Action_determiner (
//     clk, rst, episode
//     Q0, Q1, Q2, Q3, next_state
// );

// input clk, rst;
// input [12:0] episode;
// input [31:0] Q0, Q1, Q2, Q3;
// output [4:0] next_state;

// endmodule

////////////////////////////////////////////////////

//qmax_action is a module that generates qmax_action from 
//qvalue generated by neural network
module qmax_action (clk, Q0, Q1, Q2, Q3, qmax_act);
    input clk;
    input [15:0] Q0, Q1, Q2, Q3;
    output [1:0] qmax_act;

    parameter right = 2'd0; 
    parameter up = 2'd1; 
    parameter left = 2'd2; 
    parameter down = 2'd3;

    wire [31:0] max1, max2, max3;

    //search the max qvalue
    assign max1 = (Q0 > Q1)? Q0 : Q1;
    assign max2 = (Q2 > Q3)? Q2 : Q3;
    assign max3 = (max1 > max2) max1 : max2;

    //qmax action is determined by which qvalue that equal with max qvalue
    assign qmax_act = (max3 == Q0)? right :
                        (max3 == Q1)? up :
                        (max3 == Q2)? left : down;
endmodule

////////////////////////////////////////////////////

//LFSR is a module that generates 12bit random number
module LFSR(clk, random);
    input clk; 
    output [11:0] random; 
    
    reg [11:0] reg_rand; 
    wire feedback; 

    parameter init = 12'b001010010110; 
    initial reg_rand = init; 
    assign feedback = reg_rand[10] ^ reg_rand[7]; 
    
    always @ (posedge clk) begin 
        reg_rand = {reg_rand[10:0], feedback}; 
    end
    
    assign random = reg_rand; 
endmodule

//random_act is a module that generates random_act and comparison of episode-random number
module random_action(clk, episode, random_act, comparison_result);
    input clk;
    input [11:0] episode;
    output comparison_result;
    output [1:0] random_act;

    wire [11:0] random;

    LFSR random_generator(clk, random);

    //if episode < random, the action will be taken is random_act
    //else, the action will be taken is qmax_act
    assign comparison_result = (episode < random)? 1'b1 : 1'b0;

    //assign random_act by taking 2 LSB of random number
    assign random_act = random[1:0];
endmodule

////////////////////////////////////////////////////